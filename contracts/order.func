#include "imports/stdlib.fc";
#include "types.func";
#include "op-codes.func";
#include "messages.func";
#include "errors.func";

;; DATA

global slice ds::multisig_address;
global int ds::threshold;
global cell ds::signers;
global int ds::approvals_mask;
global int ds::approvals_num;
global int ds::expiration_date;
global int ds::order_hash;  ;; the Hash of order content
global int ds::salt;  ;; the salt of the order
global slice ds::init_sender;  ;; the address of the order initiator

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    ds::multisig_address = ds~load_msg_addr();
    ds::salt = ds~load_order_salt();  ;; Load the salt

    if (ds.slice_bits() == 0) {
        ;; not initialized yet
        ds::threshold = null();
        ds::signers = null();
        ;; if empty, use zero
        ds::approvals_mask = 0;
        ds::approvals_num = 0;
        ds::expiration_date = null();
        ds::order_hash = null();  ;; Initialize the order content hash
        ds::init_sender = null();  ;; Initialize the address of the request initiator
    } else {
        ds::threshold = ds~load_index();
        ds::signers = ds~load_nonempty_dict();
        ds::approvals_mask = ds~load_uint(MASK_SIZE);
        ds::approvals_num = ds~load_index();
        ds::expiration_date = ds~load_timestamp();
        ds::order_hash = ds~load_uint(256);  ;; Load the order content hash (256 bits)
        ds::init_sender = ds~load_msg_addr();  ;; Load the initializer's address
        ds.end_parse();
    }
}

(slice, (int, cell, int, int, cell)) ~parse_approve_params(slice in_msg_body) inline {
    int threshold = in_msg_body~load_index();
    cell signers = in_msg_body~load_nonempty_dict();
    int expiration_date = in_msg_body~load_timestamp();
    int signer_index = in_msg_body~load_index();
    cell opaque_order = in_msg_body~load_ref();

    in_msg_body.end_parse();

    return (in_msg_body, (threshold, signers, expiration_date, signer_index, opaque_order));
}

() save_data() impure inline {
    set_data(
        begin_cell()
        .store_slice(ds::multisig_address)
        .store_order_salt(ds::salt)
        .store_index(ds::threshold)
        .store_nonempty_dict(ds::signers)
        .store_uint(ds::approvals_mask, MASK_SIZE)
        .store_index(ds::approvals_num)
        .store_timestamp(ds::expiration_date)
        .store_hash(ds::order_hash)  ;; Store the order content hash (256 bits)
        .store_slice(ds::init_sender)  ;; Store the initializer's address
        .end_cell()
    );
}

;; UTILS

slice get_text_comment(slice in_msg_body) impure inline {
    if (in_msg_body.slice_refs() == 0) {
        return in_msg_body;
    }

    ;;combine comment into one slice
    builder combined_string = begin_cell();
    int need_exit = false;
    do {
        ;; store all bits from current cell
        ;; it's ok to overflow here, it means that comment is incorrect
        combined_string = combined_string.store_slice(in_msg_body.preload_bits(in_msg_body.slice_bits()));
        ;;and go to the next

        if (in_msg_body.slice_refs()) {
            in_msg_body = in_msg_body.preload_ref().begin_parse();
        } else {
            need_exit = true;
        }

    } until (need_exit);
    return combined_string.end_cell().begin_parse();
}

(int, int) find_signer_by_address(slice signer_address) impure inline {
    int found_signer? = false;
    int signer_index = -1;
    do {
        (signer_index, slice value, int next_found?) = ds::signers.udict_get_next?(INDEX_SIZE, signer_index);
        if (next_found?) {
            if (equal_slices_bits(signer_address, value)) {
                found_signer? = true;
                next_found? = false; ;; fast way to exit loop
            }
        }
    } until (~ next_found?);
    return (signer_index, found_signer?);
}

() add_approval(int signer_index) impure inline {
    int mask = 1 << signer_index;
    throw_if(error::already_approved, ds::approvals_mask & mask);
    ds::approvals_num += 1;
    ds::approvals_mask |= mask;
}

() inner_execute(int query_id, cell order_body) impure inline_ref {
    ;; Verify the order_content hash
    int order_cell_hash = order_body.cell_hash();  ;; compute content hash
    throw_unless(error::invalid_order, order_cell_hash == ds::order_hash);

    send_message_with_only_body(
        ds::multisig_address,
        0,
        begin_cell()
        .store_op_and_query_id(op::execute, query_id)
        .store_order_salt(ds::salt)
        .store_timestamp(ds::expiration_date)
        .store_index(ds::approvals_num)
        .store_hash(ds::signers.cell_hash())
        .store_ref(order_body),
        NON_BOUNCEABLE,
        SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_BOUNCE_ON_ACTION_FAIL
    );
    
}


;; RECEIVE

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();
    if (msg_flags & 1) { ;; is bounced
        return ();
    }
    slice sender_address = in_msg_full_slice~load_msg_addr();

    ;; read from storage
    load_data();

    int query_id = in_msg_body~load_query_id();

    int op = in_msg_body~load_op();

    if (op == 0) {
        ;; message with text comment
        slice text_comment = get_text_comment(in_msg_body);
        throw_unless(error::unknown_op, equal_slices_bits(text_comment, "approve"));

        (int signer_index, int found_signer?) = find_signer_by_address(sender_address);
        throw_unless(error::unauthorized_sign, found_signer?);

        add_approval(signer_index);

        save_data();
        return ();
    }
    ;; if notInit -> init
    if (op == op::approve) {
        throw_unless(error::unauthorized_init, equal_slices_bits(sender_address, ds::multisig_address));

        ;; read parameters
        (int threshold, cell signers, int expiration_date, int signer_index, cell opaque_order) = in_msg_body~parse_approve_params();
        slice order_slice = opaque_order.begin_parse();
        int is_hash? = order_slice~load_bool();
        cell order = null();
        int order_hash = 0;
        ;; opaque_order = Enum { Hash(order_hash), Origin(order)}
        if (is_hash?) {
            order_hash = order_slice~load_hash();
        } else {
            order = order_slice~load_ref();
            order_hash = order.cell_hash();
        }

        ;; INIT
        if (null?(ds::threshold)) {
            throw_unless(error::expired, expiration_date >= now()); ;; in case of error TONs will bounce back to multisig
            ;; initialize storage
            ds::threshold = threshold;
            ds::signers = signers;
            ds::expiration_date = expiration_date;
            ds::init_sender = sender_address;
            slice opaque_order = opaque_order.begin_parse();
            ds::order_hash = order_hash;
        } else {
            ;; already inited, Approve
            throw_unless(error::already_inited, threshold == ds::threshold);
            throw_unless(error::already_inited, signers.cell_hash() == ds::signers.cell_hash());
            throw_unless(error::already_inited, expiration_date == ds::expiration_date);
            throw_unless(error::already_inited, order_hash == ds::order_hash);
        }

        ;; approve
        add_approval(signer_index);
        
        ;; check if approved num meets requirement
        if (ds::approvals_num >= ds::threshold) & (~ is_hash?) {
            inner_execute(query_id, order);
        }

        save_data();
        return ();
    }
}

;; GET-METHODS

_ get_order_data() method_id {
    load_data();
    return (
        ds::multisig_address,
        ds::salt,
        ds::threshold,
        ds::signers,
        ds::approvals_mask,
        ds::approvals_num,
        ds::expiration_date,
        ds::order_hash, 
        ds::init_sender
    );
}
