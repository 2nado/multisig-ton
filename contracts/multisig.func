#include "imports/stdlib.fc";
#include "types.func";
#include "op-codes.func";
#include "errors.func";
#include "messages.func";
#include "order_helpers.func";

int calculate_dict_size(cell dict) inline {
    int size = 0;
    int index = -1;
    int found? = true;
    while (found?) {
        (index, slice value, int found?) = dict.udict_get_next?(INDEX_SIZE, index);
        if (found?) {
            size += 1;
        }
    }
    return size;
}

((int, cell, int), ()) ~execute_order((int, cell, int) storage, cell order_body) impure inline {

    accept_message();

    (int threshold, cell signers, int signers_num) = storage;

    int action_index = -1;
    do {
        (action_index, slice action, int found?) = order_body.udict_get_next?(ACTION_INDEX_SIZE, action_index);
        if (found?) {
            action = action.preload_ref().begin_parse();
            int action_op = action~load_op();
            if (action_op == actions::send_message) {
                int mode = action~load_uint(8);
                send_raw_message(action~load_ref(), mode);
                action.end_parse();
            } elseif (action_op == actions::update_multisig_params) {
                threshold = action~load_index();
                signers = action~load_nonempty_dict();
                signers_num = calculate_dict_size(signers);
                throw_unless(error::invalid_signers, signers_num >= 1);
                throw_unless(error::invalid_threshold, threshold > 0);
                throw_unless(error::invalid_threshold, threshold <= signers_num);

                action.end_parse();
            }
        }
    } until (~ found?);

    return ((threshold, signers, signers_num), ());
}


(int, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();
    var data = (
        ds~load_index(), ;; threshold
        ds~load_nonempty_dict(), ;; signers
        ds~load_index() ;; signers_num
    );
    ds.end_parse();
    return data;
}

() save_data(int threshold, cell signers, int signers_num) impure inline {
    set_data(
        begin_cell()
        .store_index(threshold)
        .store_nonempty_dict(signers)
        .store_index(signers_num)
        .end_cell()
    );
}

;; ;; load params from msg when op is new_order
;; (slice, (int, int, int, cell)) ~parse_approve_params(slice msg) inline {
;;     int index = msg~load_index();
;;     int expiration_date = msg~load_timestamp();
;;     int salt = msg~load_uint(256);
;;     cell order = msg~load_ref();

;;     msg.end_parse();
;;     return (
;;         msg, (index, expiration_date, salt, order)
;;     );
;; }

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    slice in_msg_full_slice = in_msg_full.begin_parse();
    int msg_flags = in_msg_full_slice~load_msg_flags();
    if (msg_flags & 1) {
        ;; if the msg is bounced
        ;; do not process it
        return ();
    }
    slice sender_address = in_msg_full_slice~load_msg_addr();

    if (in_msg_body.slice_bits() == 0) {
        return (); ;; empty message - just accept TONs
    }

    int op = in_msg_body~load_op();

    if (op == 0) {
        return (); ;; simple text message - just accept TONs
    }

    int query_id = in_msg_body~load_query_id();

    ;; load data from contract storage
    (int threshold, cell signers, int signers_num) = load_data();

    if (op == op::approve) {
        ;; ;; approve(signer_index, expiration_date, salt, order)
        ;; (int signer_index, int expiration_date, int salt, cell order) = in_msg_body~parse_approve_params();

        ;; (slice expected_address, int found?) = signers.udict_get?(INDEX_SIZE, signer_index);
        ;; throw_unless(error::unauthorized_new_order, found?);
        ;; throw_unless(error::unauthorized_new_order, equal_slices_bits(sender_address, expected_address));
        ;; throw_unless(error::expired, expiration_date >= now());

        ;; cell state_init = calculate_order_state_init(my_address(), salt);
        ;; slice order_address = calculate_address_by_state_init(BASECHAIN, state_init);
        ;; ;; order.approve(threshold, signers, expiration_date, signer_index, order)
        ;; builder init_body = begin_cell()
        ;; .store_op_and_query_id(op::init, query_id)
        ;; .store_index(threshold)
        ;; .store_nonempty_dict(signers)
        ;; .store_timestamp(expiration_date)
        ;; .store_index(signer_index)
        ;; .store_ref(order);

        ;; send_message_with_state_init_and_body(
        ;;     order_address,
        ;;     0,
        ;;     state_init,
        ;;     init_body,
        ;;     BOUNCEABLE,
        ;;     SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL
        ;; );

    } elseif (op == op::execute) {
        ;; check that sender is order smart-contract and check that it has recent
        ;; signers dict

        int salt = in_msg_body~load_order_salt();
        int expiration_date = in_msg_body~load_timestamp();
        int approvals_num = in_msg_body~load_index();
        int signers_hash = in_msg_body~load_hash();
        cell order_body = in_msg_body~load_ref();
        in_msg_body.end_parse();

        cell state_init = calculate_order_state_init(my_address(), salt);
        slice order_address = calculate_address_by_state_init(BASECHAIN, state_init);

        throw_unless(error::unauthorized_execute, equal_slices_bits(sender_address, order_address));
        throw_unless(error::singers_outdated, (signers_hash == signers.cell_hash()) & (approvals_num >= threshold));
        throw_unless(error::expired, expiration_date >= now());

        (threshold, signers, signers_num)~execute_order(order_body);
    } elseif (op == op::execute_internal) {
        ;; we always trust ourselves, this feature is used to make chains of executions
        ;; where last action of previous execution triggers new one.

        throw_unless(error::unauthorized_execute, equal_slices_bits(sender_address, my_address()));
        cell order_body = in_msg_body~load_ref();
        in_msg_body.end_parse();
        (threshold, signers, signers_num)~execute_order(order_body);
    }

    save_data(threshold, signers, signers_num);
}

(int, cell, int) get_multisig_data() method_id {
    (int threshold, cell signers, int signers_num) = load_data();
    throw_unless(error::invalid_signers, signers_num >= 1);
    throw_unless(error::invalid_threshold, threshold > 0);
    throw_unless(error::invalid_threshold, threshold <= signers_num);
    return (threshold, signers, signers_num);
}

int get_order_estimate(cell order, int expiration_date) method_id {
    (_, cell signers, _) = load_data();
    return calculate_order_processing_cost(order, signers, expiration_date - now());
}

slice get_order_address(int salt) method_id {
    cell state_init = calculate_order_state_init(my_address(), salt);
    return calculate_address_by_state_init(BASECHAIN, state_init);
}

